-- MySQL Script generated by MySQL Workbench
-- Sun Dec 22 18:31:33 2024
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema mydb
-- -----------------------------------------------------
-- -----------------------------------------------------
-- Schema lldb
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `lldb` ;

-- -----------------------------------------------------
-- Schema lldb
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `lldb` DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci ;
USE `lldb` ;

-- -----------------------------------------------------
-- Table `lldb`.`bookings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`bookings` ;

CREATE TABLE IF NOT EXISTS `lldb`.`bookings` (
  `booking_id` INT NOT NULL AUTO_INCREMENT,
  `booking_slot` DATETIME NOT NULL,
  `total_number_of_guests` INT NULL DEFAULT NULL,
  `booking_type` VARCHAR(20) NULL DEFAULT NULL,
  `comment` VARCHAR(100) NULL DEFAULT NULL,
  PRIMARY KEY (`booking_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `lldb`.`customers`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`customers` ;

CREATE TABLE IF NOT EXISTS `lldb`.`customers` (
  `customer_id` INT NOT NULL AUTO_INCREMENT,
  `f_name` VARCHAR(45) NOT NULL,
  `l_name` VARCHAR(45) NOT NULL,
  `phone_number` VARCHAR(15) NOT NULL,
  `email` VARCHAR(35) NULL DEFAULT NULL,
  `booking_no` INT NOT NULL,
  PRIMARY KEY (`customer_id`),
  INDEX `fk_customers` (`booking_no` ASC) VISIBLE,
  CONSTRAINT `customers_ibfk_1`
    FOREIGN KEY (`booking_no`)
    REFERENCES `lldb`.`bookings` (`booking_id`),
  CONSTRAINT `fk_customers`
    FOREIGN KEY (`booking_no`)
    REFERENCES `lldb`.`bookings` (`booking_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `lldb`.`menus`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`menus` ;

CREATE TABLE IF NOT EXISTS `lldb`.`menus` (
  `menu_id` INT NOT NULL AUTO_INCREMENT,
  `cuisine` VARCHAR(35) NULL DEFAULT NULL,
  `type` VARCHAR(15) NULL DEFAULT NULL,
  `country_of_origin` VARCHAR(15) NULL DEFAULT NULL,
  `Chefs_Comment` VARCHAR(30) NULL DEFAULT NULL,
  `price` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`menu_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `lldb`.`orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`orders` ;

CREATE TABLE IF NOT EXISTS `lldb`.`orders` (
  `order_id` INT NOT NULL AUTO_INCREMENT,
  `order_time` DATETIME NULL DEFAULT NULL,
  `table_no` INT NOT NULL,
  `quantity` INT NOT NULL,
  `booking_no` INT NOT NULL,
  `menu_no` INT NOT NULL,
  PRIMARY KEY (`order_id`),
  INDEX `fk_orders_1` (`booking_no` ASC) VISIBLE,
  INDEX `fk_orders_2` (`menu_no` ASC) VISIBLE,
  CONSTRAINT `fk_orders_1`
    FOREIGN KEY (`booking_no`)
    REFERENCES `lldb`.`bookings` (`booking_id`)
    ON DELETE CASCADE,
  CONSTRAINT `fk_orders_2`
    FOREIGN KEY (`menu_no`)
    REFERENCES `lldb`.`menus` (`menu_id`)
    ON DELETE CASCADE,
  CONSTRAINT `orders_ibfk_1`
    FOREIGN KEY (`menu_no`)
    REFERENCES `lldb`.`menus` (`menu_id`),
  CONSTRAINT `orders_ibfk_2`
    FOREIGN KEY (`booking_no`)
    REFERENCES `lldb`.`bookings` (`booking_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `lldb`.`offline_orders`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`offline_orders` ;

CREATE TABLE IF NOT EXISTS `lldb`.`offline_orders` (
  `offline_order_no` INT NOT NULL AUTO_INCREMENT,
  `customer_no` INT NULL DEFAULT NULL,
  `order_no` INT NULL DEFAULT NULL,
  PRIMARY KEY (`offline_order_no`),
  INDEX `customer_no` (`customer_no` ASC) VISIBLE,
  INDEX `order_no` (`order_no` ASC) VISIBLE,
  CONSTRAINT `offline_orders_ibfk_1`
    FOREIGN KEY (`customer_no`)
    REFERENCES `lldb`.`customers` (`customer_id`)
    ON DELETE CASCADE,
  CONSTRAINT `offline_orders_ibfk_2`
    FOREIGN KEY (`order_no`)
    REFERENCES `lldb`.`orders` (`order_id`)
    ON DELETE CASCADE)
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `lldb`.`orders_log`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`orders_log` ;

CREATE TABLE IF NOT EXISTS `lldb`.`orders_log` (
  `log_id` INT NOT NULL AUTO_INCREMENT,
  `order_id` INT NULL DEFAULT NULL,
  `action_type` VARCHAR(50) NULL DEFAULT NULL,
  `action_message` VARCHAR(255) NULL DEFAULT NULL,
  `action_timestamp` TIMESTAMP NULL DEFAULT CURRENT_TIMESTAMP,
  PRIMARY KEY (`log_id`))
ENGINE = InnoDB
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `lldb`.`payments`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`payments` ;

CREATE TABLE IF NOT EXISTS `lldb`.`payments` (
  `payment_id` INT NOT NULL AUTO_INCREMENT,
  `payment_type` VARCHAR(15) NULL DEFAULT NULL,
  `time_of_payment` DATETIME NULL DEFAULT NULL,
  `order_no` INT NOT NULL,
  `discount` FLOAT NULL DEFAULT NULL,
  `total_bill` FLOAT NULL DEFAULT NULL,
  PRIMARY KEY (`payment_id`),
  INDEX `fk_payments` (`order_no` ASC) VISIBLE,
  CONSTRAINT `fk_payments`
    FOREIGN KEY (`order_no`)
    REFERENCES `lldb`.`orders` (`order_id`)
    ON DELETE CASCADE,
  CONSTRAINT `payments_ibfk_1`
    FOREIGN KEY (`order_no`)
    REFERENCES `lldb`.`orders` (`order_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;


-- -----------------------------------------------------
-- Table `lldb`.`staffs`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`staffs` ;

CREATE TABLE IF NOT EXISTS `lldb`.`staffs` (
  `staff_id` INT NOT NULL AUTO_INCREMENT,
  `f_name` VARCHAR(45) NULL DEFAULT NULL,
  `l_name` VARCHAR(45) NULL DEFAULT NULL,
  `phone_no` VARCHAR(15) NULL DEFAULT NULL,
  `email` VARCHAR(35) NULL DEFAULT NULL,
  `address` VARCHAR(55) NULL DEFAULT NULL,
  `order_no` INT NOT NULL,
  PRIMARY KEY (`staff_id`),
  INDEX `fk_staffs` (`order_no` ASC) VISIBLE,
  CONSTRAINT `fk_staffs`
    FOREIGN KEY (`order_no`)
    REFERENCES `lldb`.`orders` (`order_id`)
    ON DELETE CASCADE,
  CONSTRAINT `staffs_ibfk_1`
    FOREIGN KEY (`order_no`)
    REFERENCES `lldb`.`orders` (`order_id`))
ENGINE = InnoDB
AUTO_INCREMENT = 11
DEFAULT CHARACTER SET = utf8mb4
COLLATE = utf8mb4_0900_ai_ci;

USE `lldb` ;

-- -----------------------------------------------------
-- Placeholder table for view `lldb`.`order_details`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `lldb`.`order_details` (`Customer` INT, `Ph_No` INT, `Guests` INT, `Cuisine` INT, `Type` INT, `Time_Ordered` INT, `Quantities_Ordered` INT, `Mode_of_Payment` INT, `Discount_Availed` INT, `Final_Bill` INT);

-- -----------------------------------------------------
-- procedure Final_Bill
-- -----------------------------------------------------

USE `lldb`;
DROP procedure IF EXISTS `lldb`.`Final_Bill`;

DELIMITER $$
USE `lldb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `Final_Bill`(
		IN ph_number VARCHAR(15)
 )
BEGIN
		SELECT 
    		CONCAT(CUSTOMERS.f_name,' ',CUSTOMERS.l_name) AS Customer, 
    		ORDERS.order_id, 
        ORDERS.order_time, 
        PAYMENTS.payment_type, 
        PAYMENTS.discount,
        PAYMENTS.total_bill
    FROM CUSTOMERS 
    JOIN offline_orders 
    	ON CUSTOMERS.customer_id = offline_orders.customer_no
    JOIN ORDERS 
    	ON ORDERS.order_id = offline_orders.order_no
    JOIN PAYMENTS 
    	ON PAYMENTS.order_no = ORDERS.order_id
    WHERE ph_number = CUSTOMERS.phone_number;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cancel_order
-- -----------------------------------------------------

USE `lldb`;
DROP procedure IF EXISTS `lldb`.`cancel_order`;

DELIMITER $$
USE `lldb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `cancel_order`(IN cancel_id INT)
BEGIN
		-- initiating the deletion
		DELETE FROM ORDERS 
    WHERE order_id = cancel_id;
    
    -- Conformation of the cancellation
    SELECT CONCAT("Order  ",cancel_id,"  has been cancelled") AS Confirmation;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure max_quantity
-- -----------------------------------------------------

USE `lldb`;
DROP procedure IF EXISTS `lldb`.`max_quantity`;

DELIMITER $$
USE `lldb`$$
CREATE DEFINER=`root`@`localhost` PROCEDURE `max_quantity`()
BEGIN
		SELECT 
    		CONCAT(Customers.f_name,' ',Customers.l_name) AS Customer, 
        ORDERS.order_id,ORDERS.quantity
    FROM CUSTOMERS
    	JOIN offline_orders 
    		ON CUSTOMERS.customer_id = offline_orders.customer_no
    	JOIN ORDERS 
    		ON ORDERS.order_id = offline_orders.order_no
    WHERE ORDERS.quantity = (SELECT MAX(quantity) FROM orders);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `lldb`.`order_details`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `lldb`.`order_details`;
DROP VIEW IF EXISTS `lldb`.`order_details` ;
USE `lldb`;
CREATE  OR REPLACE ALGORITHM=UNDEFINED DEFINER=`root`@`localhost` SQL SECURITY DEFINER VIEW `lldb`.`order_details` AS select concat(`lldb`.`customers`.`f_name`,' ',`lldb`.`customers`.`l_name`) AS `Customer`,`lldb`.`customers`.`phone_number` AS `Ph_No`,`lldb`.`bookings`.`total_number_of_guests` AS `Guests`,`lldb`.`menus`.`cuisine` AS `Cuisine`,`lldb`.`menus`.`type` AS `Type`,`lldb`.`orders`.`order_time` AS `Time_Ordered`,`lldb`.`orders`.`quantity` AS `Quantities_Ordered`,`lldb`.`payments`.`payment_type` AS `Mode_of_Payment`,`lldb`.`payments`.`discount` AS `Discount_Availed`,`lldb`.`payments`.`total_bill` AS `Final_Bill` from ((((`lldb`.`customers` join `lldb`.`bookings` on((`lldb`.`customers`.`booking_no` = `lldb`.`bookings`.`booking_id`))) join `lldb`.`orders` on((`lldb`.`bookings`.`booking_id` = `lldb`.`orders`.`booking_no`))) join `lldb`.`menus` on((`lldb`.`orders`.`menu_no` = `lldb`.`menus`.`menu_id`))) join `lldb`.`payments` on((`lldb`.`orders`.`order_id` = `lldb`.`payments`.`order_no`)));
USE `lldb`;

DELIMITER $$

USE `lldb`$$
DROP TRIGGER IF EXISTS `lldb`.`orders_delete` $$
USE `lldb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `lldb`.`orders_delete`
AFTER DELETE ON `lldb`.`orders`
FOR EACH ROW
BEGIN
    INSERT INTO Orders_Log (order_id, action_type, action_message)
    VALUES (OLD.order_id, 'DELETE', CONCAT('Order No ', OLD.order_id, ' has been removed.'));
END$$


USE `lldb`$$
DROP TRIGGER IF EXISTS `lldb`.`orders_insert` $$
USE `lldb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `lldb`.`orders_insert`
AFTER INSERT ON `lldb`.`orders`
FOR EACH ROW
BEGIN
    INSERT INTO Orders_Log (order_id, action_type, action_message)
    VALUES (NEW.order_id, 'INSERT', CONCAT('New Order No - ', NEW.order_id, ' has been placed.'));
END$$


USE `lldb`$$
DROP TRIGGER IF EXISTS `lldb`.`orders_update` $$
USE `lldb`$$
CREATE
DEFINER=`root`@`localhost`
TRIGGER `lldb`.`orders_update`
AFTER UPDATE ON `lldb`.`orders`
FOR EACH ROW
BEGIN
    INSERT INTO Orders_Log (order_id, action_type, action_message)
    VALUES (NEW.order_id, 'UPDATE', CONCAT('Order No - ', NEW.order_id, ' has been updated.'));
END$$


DELIMITER ;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
